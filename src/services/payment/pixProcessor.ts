import { PaymentProcessResult } from '../../types';
import { supabase } from '../../lib/supabase';

/**
 * Service to handle PIX payment generation and processing
 * In a production environment, this would integrate with a payment gateway
 */
export const PixPaymentService = {
  /**
   * Generate a PIX payment code and QR code for an event registration
   */
  async generatePayment(
    eventId: string,
    participantId: string,
    amount: number,
    participantName: string
  ): Promise<PaymentProcessResult> {
    try {
      // In a real app, this would call a payment gateway API
      // For now, we'll simulate generating a PIX code
      
      // Get event details to find the organizer PIX key
      const { data: event } = await supabase
        .from('events')
        .select(`
          *,
          organizers:organizer_id(*)
        `)
        .eq('id', eventId)
        .single();

      if (!event) {
        return {
          success: false,
          message: 'Evento não encontrado.'
        };
      }

      // Generate a unique transaction ID
      const transactionId = `PIX_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      
      // Generate a fake PIX code (in reality, this would be generated by the payment gateway)
      const pixCode = `00020101021226940014BR.GOV.BCB.PIX0136${event.organizers?.pix_key || 'default@example.com'}52040000530398654041.005802BR5921${
        event.organizers?.name || 'Arena Conexão'
      }6009SAO PAULO62140510${transactionId}6304${
        Math.floor(Math.random() * 10000).toString().padStart(4, '0')
      }`;
      
      // In a real app, this would be a URL to an actual QR code image
      const qrCodeUrl = `https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=${encodeURIComponent(
        pixCode
      )}&choe=UTF-8`;
      
      // Update the participant record with payment info
      const { error } = await supabase
        .from('participants')
        .update({
          payment_transaction_id: transactionId,
          pix_payment_code: pixCode,
          pix_qrcode_url: qrCodeUrl
        })
        .eq('id', participantId);
      
      if (error) {
        console.error('Error updating participant with payment info:', error);
        return {
          success: false,
          message: 'Erro ao salvar informações de pagamento.'
        };
      }
      
      // Also create a pending transaction record
      await supabase
        .from('financial_transactions')
        .insert({
          event_id: eventId,
          participant_id: participantId,
          amount: amount,
          type: 'INCOME',
          description: `Inscrição - ${participantName}`,
          payment_method: 'PIX',
          status: 'PENDING',
          transaction_date: new Date().toISOString()
        });
      
      return {
        success: true,
        message: 'Pagamento PIX gerado com sucesso.',
        transactionId,
        paymentCode: pixCode,
        qrcodeUrl: qrCodeUrl
      };
    } catch (error) {
      console.error('Error generating PIX payment:', error);
      return {
        success: false,
        message: 'Erro ao gerar pagamento PIX.'
      };
    }
  },
  
  /**
   * Verify payment status - in a real app this would check with payment gateway
   * For this example, it will randomly confirm some payments
   */
  async verifyPayment(transactionId: string): Promise<boolean> {
    // In a real app, this would check with a payment gateway
    // For demo purposes, we'll simulate a payment confirmation with a 50% chance
    return Math.random() > 0.5;
  },
  
  /**
   * Confirm payment manually by admin or when automatically detected as paid
   */
  async confirmPayment(participantId: string): Promise<PaymentProcessResult> {
    try {
      // Update participant record
      const { data: participant, error: participantError } = await supabase
        .from('participants')
        .update({
          payment_status: 'CONFIRMED',
          payment_date: new Date().toISOString()
        })
        .eq('id', participantId)
        .select()
        .single();
      
      if (participantError) {
        return {
          success: false,
          message: 'Erro ao confirmar pagamento do participante.'
        };
      }
      
      // Update transaction record if it exists
      await supabase
        .from('financial_transactions')
        .update({
          status: 'CONFIRMED'
        })
        .eq('participant_id', participantId);
      
      return {
        success: true,
        message: 'Pagamento confirmado com sucesso.'
      };
    } catch (error) {
      console.error('Error confirming payment:', error);
      return {
        success: false,
        message: 'Erro ao processar confirmação de pagamento.'
      };
    }
  }
};
