// Script de diagn√≥stico detalhado para eventos
// Execute este no console do navegador quando estiver na aplica√ß√£o

console.log('üîç Iniciando diagn√≥stico detalhado de eventos...');

// Fun√ß√£o para fazer query direta no Supabase
async function diagnoseEvents() {
    try {
        // Importar o supabase client
        const { supabase } = await import('./src/lib/supabase.js');
        
        console.log('‚úÖ Supabase client carregado');
        
        // 1. Todos os eventos
        console.log('\nüìã === TODOS OS EVENTOS ===');
        const { data: allEvents, error: allError } = await supabase
            .from('events')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (allError) {
            console.error('‚ùå Erro ao buscar todos os eventos:', allError);
        } else {
            console.log(`üìä Total de eventos: ${allEvents.length}`);
            allEvents.forEach((event, index) => {
                const today = new Date().toISOString().split('T')[0];
                const isToday = event.date === today;
                const isFuture = event.date > today;
                const isPast = event.date < today;
                
                let timeStatus = '‚è∞ HOJE';
                if (isFuture) timeStatus = 'üîÆ FUTURO';
                if (isPast) timeStatus = 'üìÖ PASSADO';
                
                console.log(`${index + 1}. ${event.title}`);
                console.log(`   üìã Status: ${event.status}`);
                console.log(`   üìÖ Data: ${event.date} ${timeStatus}`);
                console.log(`   üí∞ Taxa: R$ ${event.entry_fee || 0}`);
                console.log(`   üÜî ID: ${event.id}`);
                console.log('');
            });
        }
        
        // 2. Eventos eleg√≠veis (OPEN/PUBLISHED + futuros)
        console.log('\nüéØ === EVENTOS ELEG√çVEIS (OPEN/PUBLISHED + FUTUROS) ===');
        const today = new Date().toISOString().split('T')[0];
        const { data: eligibleEvents, error: eligibleError } = await supabase
            .from('events')
            .select('*')
            .in('status', ['OPEN', 'PUBLISHED'])
            .gt('date', today)
            .order('date', { ascending: true });
        
        if (eligibleError) {
            console.error('‚ùå Erro ao buscar eventos eleg√≠veis:', eligibleError);
        } else {
            console.log(`üìä Eventos eleg√≠veis: ${eligibleEvents.length}`);
            eligibleEvents.forEach((event, index) => {
                console.log(`${index + 1}. ${event.title} (${event.status}) - ${event.date}`);
            });
        }
        
        // 3. Verificar torneios para eventos eleg√≠veis
        if (eligibleEvents && eligibleEvents.length > 0) {
            console.log('\nüèÜ === TORNEIOS DOS EVENTOS ELEG√çVEIS ===');
            const eventIds = eligibleEvents.map(e => e.id);
            
            const { data: tournaments, error: tourError } = await supabase
                .from('tournaments')
                .select('*')
                .in('event_id', eventIds);
            
            if (tourError) {
                console.error('‚ùå Erro ao buscar torneios:', tourError);
            } else {
                console.log(`üìä Torneios encontrados: ${tournaments.length}`);
                
                eligibleEvents.forEach((event) => {
                    const tournament = tournaments.find(t => t.event_id === event.id);
                    
                    if (!tournament) {
                        console.log(`‚úÖ ${event.title}: SEM TORNEIO - DISPON√çVEL`);
                    } else {
                        const hasStandings = tournament.standings_data && 
                                           Object.keys(tournament.standings_data).length > 0;
                        
                        if (hasStandings) {
                            console.log(`‚ùå ${event.title}: TORNEIO INICIADO - N√ÉO DISPON√çVEL`);
                            console.log(`   üèÜ Standings:`, tournament.standings_data);
                        } else {
                            console.log(`‚úÖ ${event.title}: TORNEIO N√ÉO INICIADO - DISPON√çVEL`);
                        }
                    }
                });
            }
        }
        
        // 4. Aplicar l√≥gica do ParticipanteService
        console.log('\nüîß === APLICANDO L√ìGICA DO PARTICIPANTE SERVICE ===');
        if (eligibleEvents && eligibleEvents.length > 0) {
            const eventIds = eligibleEvents.map(e => e.id);
            
            const { data: tournaments } = await supabase
                .from('tournaments')
                .select('event_id, standings_data')
                .in('event_id', eventIds);
            
            const availableEvents = eligibleEvents.filter(event => {
                const tournament = tournaments?.find(t => t.event_id === event.id);
                
                // Se n√£o tem torneio, est√° dispon√≠vel
                if (!tournament) return true;
                
                // Se tem torneio mas standings_data est√° vazio, est√° dispon√≠vel
                if (!tournament.standings_data || 
                    Object.keys(tournament.standings_data).length === 0) {
                    return true;
                }
                
                // Se tem standings preenchido, n√£o est√° dispon√≠vel
                return false;
            });
            
            console.log(`üìä Eventos finais dispon√≠veis: ${availableEvents.length}`);
            availableEvents.forEach((event, index) => {
                console.log(`${index + 1}. ‚úÖ ${event.title} - ${event.date} - R$ ${event.entry_fee || 0}`);
            });
            
            if (availableEvents.length === 0) {
                console.log('‚ö†Ô∏è NENHUM EVENTO DISPON√çVEL ENCONTRADO!');
                console.log('üìã Poss√≠veis causas:');
                console.log('   1. Todos os eventos s√£o passados');
                console.log('   2. Todos os eventos t√™m status diferente de OPEN/PUBLISHED');
                console.log('   3. Todos os torneios j√° foram iniciados (standings preenchido)');
            }
        }
        
        // 5. Resumo final
        console.log('\nüìä === RESUMO FINAL ===');
        console.log(`üìã Total de eventos: ${allEvents?.length || 0}`);
        console.log(`üéØ Eventos eleg√≠veis: ${eligibleEvents?.length || 0}`);
        console.log(`‚úÖ Eventos dispon√≠veis: ${eligibleEvents?.filter(event => {
            const tournaments = [];
            return !tournaments?.find(t => t.event_id === event.id && t.standings_data && Object.keys(t.standings_data).length > 0);
        }).length || 0}`);
        
    } catch (error) {
        console.error('‚ùå Erro durante diagn√≥stico:', error);
    }
}

// Executar diagn√≥stico
diagnoseEvents();
